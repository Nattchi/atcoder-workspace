#!/usr/bin/env python3
import sys


def solve(H: int, W: int, X: "List[List[int]]", Q: int, A: "List[int]", B: "List[int]", C: "List[int]", D: "List[int]"):
    board = [[0] * (W + 1) for _ in range(H + 1)]
    for i in range(H):
        for j in range(W):
            board[i + 1][j + 1] = X[i][j]

    # 累積和(横)
    for i in range(1, H + 1):
        for j in range(1, W + 1):
            board[i][j] += board[i][j - 1]
    # 累積和(縦)
    for i in range(1, H + 1):
        for j in range(1, W + 1):
            board[i][j] += board[i - 1][j]
    # Query
    for i in range(Q):
        print(board[C[i]][D[i]] - board[C[i]][B[i] - 1] - board[A[i] - 1][D[i]] + board[A[i] - 1][B[i] - 1])

# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    X = [[int(next(tokens)) for _ in range(W)] for _ in range(H)]  # type: "List[List[int]]"
    Q = int(next(tokens))  # type: int
    A = [int()] * (Q)  # type: "List[int]"
    B = [int()] * (Q)  # type: "List[int]"
    C = [int()] * (Q)  # type: "List[int]"
    D = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
        C[i] = int(next(tokens))
        D[i] = int(next(tokens))
    solve(H, W, X, Q, A, B, C, D)

if __name__ == '__main__':
    main()
