#!/usr/bin/env python3
import sys
from typing import List


def solve(H: int, W: int, N: int, A: "List[int]", B: "List[int]", C: "List[int]", D: "List[int]"):
    stacked_snow: list[list[int]] = [[0] * (W + 2) for _ in range(H + 2)]
    for i in range(N):
        stacked_snow[A[i]][B[i]] += 1
        stacked_snow[A[i]][D[i] + 1] -= 1
        stacked_snow[C[i] + 1][B[i]] -= 1
        stacked_snow[C[i] + 1][D[i] + 1] += 1

    for i in range(H + 1):
        for j in range(W):
            stacked_snow[i][j + 1] += stacked_snow[i][j]

    for i in range(H):
        for j in range(W + 1):
            stacked_snow[i + 1][j] += stacked_snow[i][j]

    for i in range(1, H+1):
        line = ""
        for j in range(1, W+1):
            line += f"{stacked_snow[i][j]} "
        print(line[:-1])

# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)


def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    N = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    C = [int()] * (N)  # type: "List[int]"
    D = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
        C[i] = int(next(tokens))
        D[i] = int(next(tokens))
    solve(H, W, N, A, B, C, D)


if __name__ == '__main__':
    main()
