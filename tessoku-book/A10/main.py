#!/usr/bin/env python3
import sys
from typing import List


def solve(N: int, A: "List[int]", D: int, L: "List[int]", R: "List[int]"):
    # 部屋番号が小さい順に最大キャパシティを保持
    left_max: list[int] = [0] * (N+1)
    left_max[0] = A[0]
    for i in range(1, N):
        left_max[i] = max(left_max[i-1], A[i])
    # 部屋番号が大きい順に最大キャパシティを保持
    right_max: list[int] = [0] * (N+1)
    right_max[N-1] = A[N-1]
    for i in range(N-2, -1, -1):
        right_max[i] = max(right_max[i+1], A[i])

    for i in range(D):
        print(max(max(left_max[L[i]-2], right_max[R[i]]), 0))


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N: int = int(next(tokens))
    A: List[int] = [int(next(tokens)) for _ in range(N)]
    D: int = int(next(tokens))
    L: List[int] = [int()] * (D)
    R: List[int] = [int()] * (D)
    for i in range(D):
        L[i] = int(next(tokens))
        R[i] = int(next(tokens))
    solve(N, A, D, L, R)


if __name__ == '__main__':
    main()
