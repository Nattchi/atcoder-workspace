#!/usr/bin/env python3
import sys
from typing import Any, Generator, List


def binary_search(A: "List[int]", key: int) -> int:
    left: int = 0
    right: int = len(A) - 1
    while right - left > 1:
        mid: int = (left + right) // 2
        if A[mid] >= key:
            right = mid
        else:
            left = mid
    return right + 1

def solve(N: int, X: int, A: "List[int]") -> None:
    print(binary_search(A, X))


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main() -> None:
    def iterate_tokens() -> Generator[str, Any, None]:
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens: Generator[str, Any, None] = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, X, A)

if __name__ == '__main__':
    main()
